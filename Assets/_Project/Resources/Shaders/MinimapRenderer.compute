// --- ФАЙЛ: MinimapRenderer.compute (ВЕРСИЯ ДЛЯ КАРТЫ 3x3) ---
#pragma kernel RenderMinimap

RWTexture2D<float4> MinimapTexture;
StructuredBuffer<float4> BiomeColors;
StructuredBuffer<float4> BiomeMap;

int TextureSize;
int RegionSize; // Теперь это будет размер большой карты (например, 256 * 3 = 768)
float2 PlayerWorldPos;
float2 RegionOffset; // Это будет смещение всего блока 3x3
float MinimapScale;


[numthreads(8,8,1)]
void RenderMinimap (uint3 id : SV_DispatchThreadID)
{
    // 1. Вычисляем, какой точке в мире соответствует текущий пиксель миникарты
    float2 pixelOffset = (id.xy - (TextureSize / 2.0f)) / MinimapScale;
    float2 worldPos = PlayerWorldPos + pixelOffset;

    // 2. Вычисляем локальные координаты этой точки внутри большой карты 3x3
    int2 localPos = (int2)floor(worldPos - RegionOffset);
    
    // 3. Проверяем, не вышли ли мы за пределы данных
    if (localPos.x < 0 || localPos.x >= RegionSize || localPos.y < 0 || localPos.y >= RegionSize)
    {
        MinimapTexture[id.xy] = float4(0.1, 0.1, 0.1, 1); // Рисуем фон
        return;
    }
    
    // 4. Получаем данные о биомах из большой карты
    int mapIndex = localPos.x + localPos.y * RegionSize;
    float4 biomeData = BiomeMap[mapIndex];

    uint primaryID = (uint)biomeData.r;
    uint secondaryID = (uint)biomeData.g;
    float blendFactor = biomeData.b;
    
    // 5. Получаем цвета для биомов
    float4 primaryColor = BiomeColors[primaryID];
    float4 secondaryColor = BiomeColors[secondaryID];

    // 6. Смешиваем цвета и записываем итоговый результат
    float4 finalColor = lerp(primaryColor, secondaryColor, blendFactor);
    MinimapTexture[id.xy] = finalColor;
}